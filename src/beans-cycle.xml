<?xml version="1.0" encoding="UTF-8"?>
<!--suppress ALL -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
    IOC 容器中 Bean 的生命周期方法
    - Spring IOC 容器可以管理 Bean 的生命周期, Spring 允许在 Bean 生命周期的特定点执行定制的任务.
    - Spring IOC 容器对 Bean 的生命周期进行管理的过程:
        - 通过构造器或工厂方法创建 Bean 实例
        - 为 Bean 的属性设置值和对其他 Bean 的引用
        - 调用 Bean 的初始化方法
        - Bean 可以使用了
        - 当容器关闭时, 调用 Bean 的销毁方法
        - 在 Bean 的声明里设置 init-method 和 destroy-method 属性, 为 Bean 指定初始化和销毁方法.
    -->
    <bean id="car" class="com.sisyphuswxg.spring.beans.cycle.Car"
        init-method="init" destroy-method="destroy">
        <property name="brand" value="Audi"></property>
    </bean>

    <!--
        配置bean的后置处理器：不需要配置id，IOC容器会自动识别是一个BeanPostProcessor
        - 实现BeanPostProcessor接口，并提供postProcessBeforeInitialization和postProcessAfterInitialization的实现
        - bean: bean实例本身
        - beanName: IOC容器配置的bean的名字
        - 返回值: 是实际返回给用户的那个Bean，注意：可以在以上两个方法中修改返回的Bean，甚至返回一个新的Bean

    -->
    <bean class="com.sisyphuswxg.spring.beans.cycle.MyBeanPostProcessor"></bean>


</beans>