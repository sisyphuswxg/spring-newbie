<?xml version="1.0" encoding="UTF-8"?>
<!--suppress ALL -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
        通过静态工厂方法来配置Bean
        - 调用静态工厂方法创建 Bean是将对象创建的过程封装到静态方法中. 当客户端需要对象时, 只需要简单地调用静态方法, 而不同关心创建对象的细节.
        - 要声明通过静态方法创建的 Bean, 需要在 Bean 的 class 属性里指定拥有该工厂的方法的类, 同时在 factory-method 属性里指定工厂方法的名称. 最后, 使用 <constrctor-arg> 元素为该方法传递方法参数.
        - class属性指向静态工厂方法的全类名
        - factory-method: 指向静态工厂方法的名字
        - constructor-arg: 如果工厂方法需要传入参数，则使用constructor-arg来配置参数
    -->
    <bean id="car" class="com.sisyphuswxg.spring.beans.factory.StaticCarFactory" factory-method="getCar">
        <constructor-arg value="Audi"></constructor-arg>
    </bean>

    <!--
        通过实例工厂方法来配置Bean
        - 实例工厂方法: 将对象的创建过程封装到另外一个对象实例的方法里. 当客户端需要请求对象时, 只需要简单的调用该实例方法而不需要关心对象的创建细节.
        - factory-bean: 指定拥有该工厂方法的 Bean
        - factory-method: 指定拥有该工厂方法的 Bean
        - constructor-arg: 指定拥有该工厂方法的 Bean
    -->
    <bean id="carFactory" class="com.sisyphuswxg.spring.beans.factory.InstanceCarFactory"></bean>
    <bean id="car1" factory-bean="carFactory" factory-method="getCar">
        <constructor-arg value="Ford"></constructor-arg>
    </bean>

</beans>